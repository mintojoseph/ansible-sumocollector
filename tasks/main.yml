---

- name: Include distribution-specific variables
  include_vars: "{{ ansible_distribution }}.yml"

- include: requirements.yml

# sumo.conf is deprecated in prefence of user.properties
# This should be sym-linked by /opt/SumoCollector/config/user.properties
# in mounted into container
- name: 'Ensure sumologic_config_dir exists'
  file:
    state: directory
    dest: "{{ sumologic_config_dir }}"
    mode: 0700
    owner: "{{ sumologic_config_dir_owner }}"
  tags: [sumologic, sumologic-collector]

- name: 'Template SumoCollector files'
  template:
    src: "{{ item }}"
    dest: "{{ sumologic_config_dir }}/{{ item }}"
    mode: 0700
    owner: "{{ sumologic_config_dir_owner }}"
  tags: [sumologic, sumologic-collector]
  notify: Restart SumoCollector
  with_items:
    - sumo-perf-script.sh
    - user.properties
    - sumo-env.sh
    - sumo-check-disk.sh

- name: 'Optionally stop sumo'
  command: "{{ sumologic_collector_root }}/collector stop"
  tags: [sumologic, sumologic-collector]
  when: sumologic_remove_tar_install == "yes"
  ignore_errors: yes

- name: 'Optionally delete tar install'
  file:
    state: absent
    dest: /opt/SumoCollector
  tags: [sumologic, sumologic-collector]
  when: sumologic_remove_tar_install == "yes"
  ignore_errors: yes

- name: 'Optionally delete yum install'
  yum:
    state: absent
  tags: [sumologic, sumologic-collector]
  when: sumologic_remove_yum_install == "yes"
  ignore_errors: yes

- name: 'Template cron for disk stats'
  template:
    src: etc_cron.d_disk
    dest: /etc/cron.d/disk

- name: 'Check for SumoCollector'
  command: dpkg-query -l sumocollector
  register: sumologic_collector_deb_check
  failed_when: no
  changed_when: false
  tags: sumologic

- name: 'Download SumoCollector'
  get_url:
    url: '{{ sumocollector_installer_download }}'
    dest: '{{ sumologic_installer_remote_file }}'
  when: ansible_os_family == "Debian"
  tags: sumologic

- name: 'Download SumoCollector redhat'
  get_url:
    url: '{{ sumocollector_installer_rpm }}'
    dest: '{{ sumologic_installer_rpm_local_folder }}/sumo_collector.rpm'
  when: ansible_os_family == "RedHat"
  tags: sumologic

- name: 'Create collector configuration'
  template:
    src: collector.json.j2
    dest: /etc/sumologic-collector.json
  tags: [sumologic, sumologic-collector]
  notify: Restart SumoCollector
  when: sumologic_single_source_file == "yes"

- name: 'Ensure sumo sources directory exists'
  file:
    state: directory
    dest: "{{ sumologic_sources_dir }}"
  tags: [sumologic, sumologic-collector]
  when: sumologic_single_source_file != "yes"

- name: 'Ensure sumo temp data and logs dir exists'
  file:
    state: directory
    dest: "{{ sumologic_host_dir }}"
  tags: [sumologic, sumologic-collector]

- debug:
    var: sumologic_collector_log_paths

- name: create config files
  template: src=../templates/sources.j2 dest=/etc/sumo/sumo.d/{{item.name}}.json
  with_items: "{{ sumologic_collector_log_paths }}"

- include: linux_performance.yml
  tags: [sumologic, sumologic-collector]
  when: sumologic_do_sysstat | default(False)

- include: native_install.yml
  when: sumologic_install_method == "yum"
  tags: [sumologic, sumologic-collector]

- include: docker_install.yml
  when: sumologic_install_method == "docker"
  tags: [sumologic, sumologic-collector]

- name: 'Set udp limits for sumo (native and inherited by container)'
  sysctl:
    name: "{{ item.n }}"
    value: "{{ item.v }}"
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
   - { n: 'net.core.wmem_max', v: 8388608 }
   - { n: 'net.core.rmem_max', v: 8388608 }
  tags: [sumologic, sumologic-collector]
  when: >
    (ansible_virtualization_type is not defined or
      (ansible_virtualization_type != "lxc" and ansible_virtualization_type != "docker")
    )

- name: 'Ensure collector is running'
  service:
    name: "{{ item }}"
    state: started
  with_items:
    - sumologic-collector.service
  when: sumologic_install_method == "docker"
  tags: [sumologic, sumologic_docker]

- name: 'Force restart SumoCollector'
  command: "{{ sumologic_collector_root }}/collector restart"
  tags: [sumologic, sumologic-collector, sumologic_force_restart]
  when: (sumologic_force_restart == "yes") and (sumologic_install_method != "docker")

- name: 'Force restart SumoCollector docker'
  command: echo "restarting docker"
  changed_when: false
  tags: [sumologic, sumologic-collector, sumologic_force_restart]
  when: (sumologic_force_restart == "yes") and (sumologic_install_method == "docker")
  notify: 'Restart SumoCollector'

- name: 'Install SumoCollector apt'
  apt:
    deb: '{{ sumologic_installer_remote_file }}'
    state: installed
  when: ansible_os_family == "Debian"
  tags: sumologic
  notify: Restart SumoCollector
  register: pkg_result
  until: pkg_result is success

- name: 'Install SumoCollector yum'
  yum:
    name: '{{ sumologic_installer_rpm_local_folder }}/sumo_collector.rpm'
    state: present
  when: ansible_os_family == "RedHat"
  tags: sumologic
  notify: Restart SumoCollector
